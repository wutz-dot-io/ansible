---
- hosts: hostgroup
  serial: 1
  remote_user: ansible
  become: yes
  tasks:
          - name: Check if there is a previous snapshot for {{inventory_hostname}}
            shell: /home/ansible/.local/bin/openstack image list | grep {{inventory_hostname}}
            environment:
                    OS_AUTH_TYPE: '{{ auth_type }}'
                    OS_AUTH_URL: '{{ auth_url }}'
                    OS_IDENTITY_API_VERSION: '{{ auth_version }}'
                    OS_REGION_NAME: '{{ auth_region }}'
                    OS_INTERFACE: '{{ auth_interface }}'
                    OS_APPLICATION_CREDENTIAL_ID: '{{ auth_id }}'
                    OS_APPLICATION_CREDENTIAL_SECRET: '{{ auth_password }}'
            register: has_image
            ignore_errors: true
            delegate_to: localhost

          - name: Remove old image snapshot for {{inventory_hostname}}
            shell: /home/ansible/.local/bin/openstack image delete {{inventory_hostname}}-update-snap
            environment:
                    OS_AUTH_TYPE: '{{ auth_type }}'
                    OS_AUTH_URL: '{{ auth_url }}'
                    OS_IDENTITY_API_VERSION: '{{ auth_version }}'
                    OS_REGION_NAME: '{{ auth_region }}'
                    OS_INTERFACE: '{{ auth_interface }}'
                    OS_APPLICATION_CREDENTIAL_ID: '{{ auth_id }}'
                    OS_APPLICATION_CREDENTIAL_SECRET: '{{ auth_password }}'
            delegate_to: localhost
            when: has_image.rc == 0

          - name: Wait 1 minute
            pause: 
                    minutes: 1

          - name: Create new image snapshot {{inventory_hostname}}-update-snap
            shell: /home/ansible/.local/bin/openstack server image create {{inventory_hostname}} --name {{inventory_hostname}}-update-snap
            environment:
                    OS_AUTH_TYPE: '{{ auth_type }}'
                    OS_AUTH_URL: '{{ auth_url }}'
                    OS_IDENTITY_API_VERSION: '{{ auth_version }}'
                    OS_REGION_NAME: '{{ auth_region }}'
                    OS_INTERFACE: '{{ auth_interface }}'
                    OS_APPLICATION_CREDENTIAL_ID: '{{ auth_id }}'
                    OS_APPLICATION_CREDENTIAL_SECRET: '{{ auth_password }}'
            delegate_to: localhost
            
          - name: Wait 2 minutes
            pause:
                    minutes: 2

          - name: Update Repositories
            apt: update_cache=yes
                 force_apt_get=yes 
                 cache_valid_time=3600

          - name: Upgrade all apt packages
            apt: upgrade=dist 
                 force_apt_get=yes

          - name: Autoclean repository of unavailable packages
            apt: autoclean=true
                 force_apt_get=yes

          - name: Autoremove old packages
            apt: autoremove=true
                 force_apt_get=yes

          - name: Check if a reboot is needed for Debian and Ubuntu boxes
            register: reboot_required_file
            stat: path=/var/run/reboot-required get_md5=no

          - name: Reboot the Debian or Ubuntu Server
            reboot:
                    msg: "Reboot initiated by Ansible due to kernel updates"
                    connect_timeout: 5
                    reboot_timeout: 300
                    pre_reboot_delay: 0
                    post_reboot_delay: 30
                    test_command: uptime
            when: reboot_required_file.stat.exists
